#pragma once

#include <string>

std::string sdfsource = R"(

#version 440

#define PI 3.1415926535897932384626433832795

precision highp float;

float dot2(const vec3 v) {
	return dot(v, v);
}

float udTriangle(const vec3 p, const vec3 a, const vec3 b, const vec3 c) {
    vec3 ba = b - a; vec3 pa = p - a;
    vec3 cb = c - b; vec3 pb = p - b;
    vec3 ac = a - c; vec3 pc = p - c;
    vec3 nor = cross(ba, ac);

    return sqrt(
    (sign(dot(cross(ba, nor), pa)) +
     sign(dot(cross(cb, nor), pb)) +
     sign(dot(cross(ac, nor), pc)) < 2.0)
     ?
     min(min(
     dot2(ba * clamp(dot(ba, pa) / dot2(ba), 0.0, 1.0) - pa),
     dot2(cb * clamp(dot(cb, pb) / dot2(cb), 0.0, 1.0) - pb)),
     dot2(ac * clamp(dot(ac, pc) / dot2(ac), 0.0, 1.0) - pc))
     :
     dot(nor, pa) * dot(nor, pa) / dot2(nor));
}



int rayIntersectsTriangle(vec3 p, vec3 d,
			vec3 v0, vec3 v1, vec3 v2) {

	vec3 e1,e2,h,s,q;
	float a,f,u,v;
	e1 = v1 - v0;
    e2 = v2 - v0;

	h = cross(d,e2);
	a = dot(e1,h);

	if (a > -0.00001 && a < 0.00001)
		return 0;

	f = 1.0/a;
	s = p - v0;
	u = f * (dot(s,h));

	if (u < 0.0 || u > 1.0)
		return 0;

	q = cross(s,e1);
	v = f * dot(d,q);

	if (v < 0.0 || u + v > 1.0)
		return 0;

	// at this stage we can compute t to find out where
	// the intersection point is on the line
	float t = f * dot(e2,q);

	if (t > 0.0000001) // ray intersection
		return 1 ;

	else // this means that there is a line intersection
		 // but not a ray intersection
		 return 0;

}

struct Triangle {
    vec4 v1;
    vec4 v2;
    vec4 v3;
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8 ) in;

layout(std430, binding = 1) buffer input_data
{
    Triangle triangles[];
};

layout(std430, binding = 2) buffer output_data
{
    float data[];
};

void main()
{
    float x = 1.0/(gl_WorkGroupSize.x * gl_NumWorkGroups.x )*(gl_GlobalInvocationID.x+0.5);
    float y = 1.0/(gl_WorkGroupSize.y * gl_NumWorkGroups.y )*(gl_GlobalInvocationID.y+0.5);
    float z = 1.0/(gl_WorkGroupSize.z * gl_NumWorkGroups.z )*(gl_GlobalInvocationID.z+0.5);

    float dist = 999999.0;
    Triangle triangle;
    int hitsx = 0;
    int hitsy = 0;
    int hitsz = 0;
    const vec3 rayx = vec3(1.0, 0.0, 0.0);
    const vec3 rayy = vec3(0.0, 1.0, 0.0);
    const vec3 rayz = vec3(0.0, 0.0, 1.0);
    for(int i = 0; i < triangles.length(); i++) {
        float d2 = udTriangle(vec3(x,y,z), triangles[i].v1.xyz, triangles[i].v2.xyz, triangles[i].v3.xyz);
        if(d2 < dist) {
            dist = d2;
            triangle = triangles[i];
        }
    	hitsx += rayIntersectsTriangle(vec3(x,y,z), rayx, triangles[i].v1.xyz, triangles[i].v2.xyz, triangles[i].v3.xyz);
    	hitsy += rayIntersectsTriangle(vec3(x,y,z), rayy, triangles[i].v1.xyz, triangles[i].v2.xyz, triangles[i].v3.xyz);
    	hitsz += rayIntersectsTriangle(vec3(x,y,z), rayz, triangles[i].v1.xyz, triangles[i].v2.xyz, triangles[i].v3.xyz);
    }

    if(int(hitsx%2 == 1) + int(hitsy%2 == 1) + int(hitsz%2 == 1) > int(hitsx%2 == 0) + int(hitsy%2 == 0) + int(hitsz%2 == 0)) {
        dist *= -1;
    }

    data[gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*64 + gl_GlobalInvocationID.z*64*64] = dist; //- 0.025;
}

)";