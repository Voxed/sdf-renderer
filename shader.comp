#pragma once

#include <string>

std::string source = R"(

#version 440

#define PI 3.1415926535897932384626433832795

layout(local_size_x = 16, local_size_y = 16 ) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

precision highp float;

struct SDFInstance {
    mat4 transform;
    vec4 size;
    float dataBegin;
    float dataEnd;
};

layout(std430, binding = 1) buffer sdfInstances
{
    SDFInstance instances[];
};

layout(std430, binding = 2) buffer sdfData
{
    float data[];
};

float distToBox(vec3 pos, vec3 boxSize) {
    vec3 closestPoint = clamp(pos, -boxSize/2.0, boxSize/2.0);

    return length(closestPoint - pos);
}

float SDFvalue(SDFInstance instance, vec3 voxelr)
{
    vec3 voxel = clamp(voxelr, vec3(0), instance.size.xyz - vec3(1));

    int index = int(voxel.x + voxel.y * instance.size.x + voxel.z * instance.size.x * instance.size.y);
    float data = data[int(instance.dataBegin) + index];
    return data;
}

vec2 SDFdist(SDFInstance instance, vec3 ray) {
    vec3 model_space = (instance.transform*vec4(ray, 1.0)).xyz;
    float d = distToBox(model_space, instance.size.xyz);
    if(d < .1) {
        vec3 off = model_space + instance.size.xyz/2;

        vec3 dist = mod(off+0.5f, 1.0f);

        float v1 = SDFvalue(instance, floor(off + vec3(0.5, 0.5, 0.5)));
        float v2 = SDFvalue(instance, floor(off + vec3(-0.5, 0.5, 0.5)));
        float v3 = SDFvalue(instance, floor(off + vec3(0.5, -0.5, 0.5)));
        float v4 = SDFvalue(instance, floor(off + vec3(-0.5, -0.5, 0.5)));
        float v5 = SDFvalue(instance, floor(off + vec3(0.5, 0.5, -0.5)));
        float v6 = SDFvalue(instance, floor(off + vec3(-0.5, 0.5, -0.5)));
        float v7 = SDFvalue(instance, floor(off + vec3(0.5, -0.5, -0.5)));
        float v8 = SDFvalue(instance, floor(off + vec3(-0.5, -0.5, -0.5)));

        float v15 = mix(v5, v1, dist.z);
        float v26 = mix(v6, v2, dist.z);
        float v37 = mix(v7, v3, dist.z);
        float v48 = mix(v8, v4, dist.z);

        float v1537 = mix(v37, v15, dist.y);
        float v4826 = mix(v48, v26, dist.y);

        float v = mix(v4826, v1537, dist.x);

        if(v < 0.01) {
            return vec2(v, 1.0f);
        }else{
            return vec2(v, 0.0f);
        }
    }else{
        return vec2(d, 0.0f);
    }
}

vec4 rayCast(vec3 ray, vec3 dir) {
    vec3 start = ray;
    float distance = 0.0f;
    while(distance < 150){
        vec2 d = vec2(150.0f, 0.0f);
        for(int i =0; i < instances.length(); i++) {
            vec2 d2 = SDFdist(instances[i], ray);
            if(d2.x < d.x) {
                d = d2;
            }
        }
        if(d.y == 1.0f) {
            return vec4(ray, 1.0f);
        }else{
            distance += d.x;
            ray = start + distance*dir;
        }
    }
    return vec4(ray, 0.0f);
}

void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dims = imageSize(img_output);
    vec2 p = vec2( pixel_coords * 2 - dims ) / dims * 32;
    vec3 color = vec3(0);
    vec3 ray = vec3(p, -50.0f);
    vec3 dir = vec3(0,0,1);
    vec4 d1 = rayCast(ray, dir);
    vec4 d2 = rayCast(ray + vec3(0.00005,0.0,0.0), dir);
    vec4 d3 = rayCast(ray + vec3(0.0,0.00005,0.0), dir);
    if(d1.w == 1.0f) {
        vec3 A = d2.xyz - d1.xyz;
        vec3 B = d3.xyz - d1.xyz;
        vec3 n = vec3(
            A.y * B.z - A.z * B.y,
            A.z * B.x - A.x * B.z,
            A.x * B.y - A.y * B.x
          );
        imageStore(img_output, pixel_coords, vec4(normalize(n), 1.0));
    }else{
        imageStore(img_output, pixel_coords, vec4(0.0, 0.0, 0.0, 1.0));
    }
}

)";